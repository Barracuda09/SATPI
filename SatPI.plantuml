@startuml

hide footbox

title SatPI

SatPI *-- StreamManager
SatPI *-- RtspServer
SatPI *-- HttpServer
SatPI *-- SsdpServer
SatPI *-- Properties
SatPI *-- InterfaceAttr


class SatPI #ffcccc {
  Properties
  InterfaceAttr
}

class InterfaceAttr {
  Eth0 etc.
}

class socket::HttpcSocket {
  recvHttpcMessage(..)
  recvfromHttpcMessage(..)
}

socket::SocketClient --|> socket::SocketAttr
class socket::SocketClient {
  std::string _msg
  std::string _protocolString
  std::string _sessionID
}

class socket::SocketAttr {
  _fd
  std::string _ip_addr
}

socket::TcpSocket --|> socket::HttpcSocket
socket::TcpSocket *-- socket::SocketAttr : "_server"
socket::TcpSocket *-- socket::SocketClient : "_client[..]"
class socket::TcpSocket {
  poll(..) -> calls recvHttpcMessage(..)
           -> calls process(..)
           -> calls closeConnection(..)
  std::string _protocolString
}

socket::UdpSocket --|> socket::HttpcSocket
class socket::UdpSocket {
  init_udp_socket(..)
  init_mutlicast_udp_socket(..)
}

SsdpServer --|> socket::UdpSocket

RtspServer --|> HttpcServer
class RtspServer {
  threadEntry() -> calls poll(..)
  methodSetup(..)
  methodPlay(..)
  methodOptions(..)
  methodDescribe(..)
  methodTeardown(..)
}

HttpServer --|> HttpcServer
HttpServer *.. Properties
class HttpServer {
  threadEntry() -> calls poll(..)
  methodPost(..)
  methodGet(..)
}

HttpcServer --|> socket::TcpSocket
HttpcServer *.. StreamManager : "_streamManager"
HttpcServer *.. InterfaceAttr
class HttpcServer {
  process(..)
  closeConnection(..)
  processStreamingRequest(..)
}

Stream --|> StreamInterface
Stream *-- StreamClient : " _client[..] "
Stream *-- input::Device
Stream *-- output::StreamThreadBase
class Stream {
  Mutex
  streamInUse
  enabled
  StreamingType
}

StreamManager *-- Stream : " _stream[..] "
StreamManager *-- decrypt::dvbapi::Client
class StreamManager {
  Mutex
}

StreamClient *-- socket::SocketAttr : " _rtp "
StreamClient *-- socket::SocketAttr : " _rtcp "
StreamClient *.. socket::SocketClient : " _httpc "
class StreamClient #aaaaff {
  Mutex
  SocketClient *_httpc
  watchdog
  canClose
  cseq
}

output::StreamThreadBase *.. decrypt::dvbapi::Client
output::StreamThreadBase *-- TSPacketBuffer : " _tsBuffer[..] "
output::StreamThreadBase *.. StreamInterface
class output::StreamThreadBase {
}


output::StreamThreadRtp --|> output::StreamThreadBase
output::StreamThreadRtp *-- RtcpThread
class output::StreamThreadRtp {
  cseq
}

RtcpThread *.. StreamInterface
class RtcpThread {
}

StreamThreadHttp --|> output::StreamThreadBase

decrypt::dvbapi::Client  .  StreamManager
class decrypt::dvbapi::Client {
  Mutex
  getFrontendDecryptInterface(..)
}

input::file::TSReader --|> input::Device

input::Device <|-- input::dvb::Frontend
FrontendDecryptInterface <|-- input::dvb::Frontend

input::dvb::Frontend *-- input::dvb::delivery::System : " _deliverySystem[..] "
input::dvb::Frontend *-- input::dvb::FrontendData
input::dvb::Frontend *-- input::Translation : " _translation "


input::dvb::delivery::System <|-- DVBS
input::dvb::delivery::System <|-- DVBC
input::dvb::delivery::System <|-- DVBT
input::dvb::delivery::System <|-- ATSC


DVBS *-- DiSEqc_t

DiSEqc_t *-- Lnb_t

decrypt::dvbapi::ClientProperties *-- dvbcsa_key_s
decrypt::dvbapi::ClientProperties *-- TSTableData : " _pat "
decrypt::dvbapi::ClientProperties *-- TSTableData : " _pmt "

input::DeviceData <|-- input::dvb::FrontendData
mpegts::PidTable --* input::DeviceData

input::dvb::FrontendData --|> decrypt::dvbapi::ClientProperties

@enduml

